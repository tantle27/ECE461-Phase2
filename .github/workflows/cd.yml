name: Deploy to AWS Lambda


on:
  push:
    branches: [ main ]


jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write


    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1


      - name: Build, tag, and push Lambda image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }} # e.g. 123456789012.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # repository name
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image for Lambda
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          # Tag for ECR with the commit SHA
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Also tag as :latest
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # Push both tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest


      - name: Update Lambda function with new image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }} # Lambda function name
        run: |
          # Update Lambda function to use the new image
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG


      - name: Wait for Lambda function update to complete
        env:
          LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
        run: |
          # Wait for the function update to finish
          aws lambda wait function-updated \
            --function-name $LAMBDA_FUNCTION_NAME

      - name: Update Lambda environment variables
        env:
          LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GENAI_API_KEY: ${{ secrets.GENAI_API_KEY }}
        run: |
          # Get current environment variables
          CURRENT_VARS=$(aws lambda get-function-configuration \
            --function-name $LAMBDA_FUNCTION_NAME \
            --query 'Environment.Variables' \
            --output json)
          
          # Merge with tokens (map GH_TOKEN to GITHUB_TOKEN for the app)
          UPDATED_VARS=$(echo "$CURRENT_VARS" | jq \
            --arg github "$GH_TOKEN" \
            --arg genai "$GENAI_API_KEY" \
            '. + {GITHUB_TOKEN: $github, GENAI_API_KEY: $genai}')
          
          # Update Lambda configuration
          aws lambda update-function-configuration \
            --function-name $LAMBDA_FUNCTION_NAME \
            --environment "Variables=$UPDATED_VARS" \
            --output json > /dev/null
          
          # Wait for update to complete
          aws lambda wait function-updated \
            --function-name $LAMBDA_FUNCTION_NAME
          
          echo "âœ“ Environment variables updated with API tokens"

      - name: Notify deployment
        run: echo "Deployed ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }} to Lambda function ${{ secrets.LAMBDA_FUNCTION_NAME }}"